// Generated by CoffeeScript 1.3.1

/*
Author: 	Joel Kemp, @mrjoelkemp
Project: 	Todo App 
File: 		todoapp.coffee
Purpose: 	Main script for the todo app.
Notes:		App only supports Create and Delete. 
			To update, you must delete the task and create a new one.
			Upon completion of a task, simply delete it.
Future: 	Completed tasks should be archived into a different UI element or
			use a strikethrough and add it to the bottom of the task list.
*/


(function() {
  var appendTasksToTaskList, appendToTaskList, blurHandler, create, dblClickHandler, dblClickInlineHandler, deleteFromStorage, getBottomNeighbors, getLargestId, getNewId, getNewRank, getTaskFromID, getTasksFromUI, getTopNeighborRank, getTopNeighbors, loadFromStorage, modifyNeighborRanks, sortStopHandler, store, storeTasks, taskListEmpty, taskToObject, tasksExist;

  loadFromStorage = function() {
    var ids, objs, ranked_objs, tasks;
    if (!tasksExist()) {
      return 0;
    }
    $("#taskList #title").show();
    ids = Object.keys(localStorage);
    tasks = _.map(ids, function(id) {
      var taskObj, taskString;
      taskString = localStorage.getItem(id);
      taskObj = JSON.parse(taskString);
      return taskObj;
    });
    objs = _.map(tasks, function(taskObj) {
      return create(taskObj.id, taskObj.rank, taskObj.text);
    });
    ranked_objs = _.sortBy(objs, function(o) {
      return o.data("rank");
    });
    return appendTasksToTaskList(ranked_objs);
  };

  deleteFromStorage = function(task) {
    var id;
    id = task.data("id");
    return localStorage.removeItem(id);
  };

  create = function(id, rank, text) {
    var task;
    task = $("<li></li>").clone();
    task.data("id", id).data("rank", rank).html(text).addClass("task").click(function(e) {
      task[0].designMode = "on";
      task.attr("contentEditable", "true");
      console.log("Editing mode on");
      $("#editSwitch").hide();
      task.focus();
      return task.blur(function() {
        return blurHandler(task);
      });
      /*
      			#FIXME: This sucks to use a global
      			# We're using this to keep track of the editable item
      			window.taskHoveredId = id
      			#console.log("Hovered over: " + window.taskHoveredId)
      			
      			# Show edit icon
      			# Position of the edit link is to the left of the task
      			taskPos = $("#taskList").position()
      			taskY = task.position().top
      			console.log("Pos: ", taskPos)
      			$("#editSwitch").css({"top": taskY, "left":taskPos.left})
      							.show()
      */

    }).addClass("ui-state-default");
    return task;
  };

  appendTasksToTaskList = function(tasks) {
    return _.each(tasks, function(t) {
      return appendToTaskList(t);
    });
  };

  appendToTaskList = function(task) {
    return task.appendTo("#tasks");
  };

  storeTasks = function(tasks) {
    return _.each(tasks, function(t) {
      return store(t);
    });
  };

  store = function(task) {
    var id, taskJSON;
    taskJSON = taskToObject(task);
    id = taskJSON.id;
    task = JSON.stringify(taskJSON);
    return localStorage.setItem(id, task);
  };

  getNewId = function() {
    return getLargestId() + 1;
  };

  getLargestId = function() {
    var ids, largest, tasks;
    if (taskListEmpty()) {
      return -1;
    }
    tasks = getTasksFromUI();
    ids = _.map(tasks, function(task) {
      return task.data("id");
    });
    largest = _.max(ids);
    return largest;
  };

  getNewRank = function() {
    var newRank, ranks, tasks;
    if (taskListEmpty()) {
      return 0;
    }
    tasks = getTasksFromUI();
    ranks = _.map(tasks, function(task) {
      return task.data("rank");
    });
    newRank = _.max(ranks) + 1;
    return newRank;
  };

  taskListEmpty = function() {
    var isEmpty, tasks;
    tasks = getTasksFromUI();
    isEmpty = tasks.length === 0;
    return isEmpty;
  };

  taskToObject = function(task) {
    var json;
    json = {
      "id": task.data("id"),
      "rank": task.data("rank"),
      "text": task.html()
    };
    return json;
  };

  getTasksFromUI = function() {
    var children;
    children = $("#tasks").children();
    if (children.length === 0) {
      return [];
    }
    children = _.map(children, function(c) {
      return $(c);
    });
    return children;
  };

  getTaskFromID = function(id) {
    var first, tasks, tasks_found;
    tasks = getTasksFromUI();
    tasks_found = _.reject(tasks, function(t) {
      return t.data("id") !== id;
    });
    first = tasks_found[0];
    return first;
  };

  tasksExist = function() {
    var ids;
    ids = Object.keys(localStorage);
    if (!_.isEmpty(ids)) {
      return true;
    } else {
      return false;
    }
  };

  getTopNeighborRank = function(id) {
    var desired_top_neighbor, i, neighborRank, tasks, top_neighbor, _i, _ref;
    tasks = getTasksFromUI();
    neighborRank = void 0;
    for (i = _i = 0, _ref = tasks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      top_neighbor = tasks[i + 1];
      if (top_neighbor === !void 0) {
        desired_top_neighbor = top_neighbor.data("id") === id;
        if (desired_top_neighbor) {
          neighborRank = tasks[i].data("rank");
        }
      }
    }
    return neighborRank;
  };

  getTopNeighbors = function(rank, tasks) {
    var tops;
    tops = _.filter(tasks, function(t) {
      return t.data("rank") <= rank;
    });
    return tops;
  };

  getBottomNeighbors = function(rank, tasks) {
    var bottoms;
    bottoms = _.filter(tasks, function(t) {
      return t.data("rank") > rank;
    });
    return bottoms;
  };

  modifyNeighborRanks = function(tasks, offset) {
    _.each(tasks, function(t) {
      return t.data("rank", t.data("rank") + offset);
    });
    return storeTasks(tasks);
  };

  sortStopHandler = function(e, ui) {
    var i, task, tasks, _i, _ref;
    tasks = getTasksFromUI();
    for (i = _i = 0, _ref = tasks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      task = tasks[i];
      task.data("rank", i);
    }
    return storeTasks(tasks);
  };

  dblClickInlineHandler = function(task) {
    task[0].designMode = "on";
    console.log("Editing mode on");
    task.attr("contentEditable", "true");
    return task.blur(function() {
      return blurHandler(task);
    });
  };

  blurHandler = function(task) {
    task[0].designMode = "off";
    task.attr("contentEditable", "false");
    console.log("Editing mode off");
    return store(task);
  };

  dblClickHandler = function(task) {
    var bottoms, id, rank, tasks;
    id = task.data("id");
    rank = task.data("rank");
    tasks = getTasksFromUI();
    bottoms = getBottomNeighbors(rank, tasks);
    modifyNeighborRanks(bottoms, -1);
    deleteFromStorage(task);
    return task.remove();
  };

  $(function() {
    $("#tasks").sortable();
    $("#todotext").focus();
    $("#todotext").keydown(function(e) {
      var enterPressed, id, isBlank, rank, task, text;
      enterPressed = e.keyCode === 13;
      if (enterPressed) {
        text = $("#todotext")[0].value;
        isBlank = text === "";
        if (!isBlank) {
          $("#todotext")[0].value = "";
          id = getNewId();
          rank = getNewRank();
          task = create(id, rank, text);
          appendToTaskList(task);
          return store(task);
        }
      }
    });
    $("#editSwitch").bind("click", function() {
      var task, taskId;
      taskId = window.taskHoveredId;
      task = getTaskFromID(taskId);
      task[0].designMode = "on";
      task.attr("contentEditable", "true");
      console.log("Editing mode on");
      $("#editSwitch").hide();
      task.focus();
      return task.blur(function() {
        return blurHandler(task);
      });
    });
    return loadFromStorage();
  });

}).call(this);
