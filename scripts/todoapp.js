// Generated by CoffeeScript 1.3.1
(function() {
  var appendTasksToTaskList, appendToTaskList, create, dblClickHandler, deleteFromStorage, getBottomNeighbors, getLargestId, getNewId, getNewRank, getTasksFromUI, getTopNeighborRank, getTopNeighbors, loadFromStorage, modifyNeighborRanks, sortStopHandler, store, storeTasks, taskListEmpty, taskToObject, tasksExist;

  loadFromStorage = function() {
    var ids, objs, ranked_objs, tasks;
    if (!tasksExist()) {
      return 0;
    }
    $("#taskList #title").show();
    ids = Object.keys(localStorage);
    tasks = _.map(ids, function(id) {
      var taskObj, taskString;
      taskString = localStorage.getItem(id);
      taskObj = JSON.parse(taskString);
      return taskObj;
    });
    objs = _.map(tasks, function(taskObj) {
      return create(taskObj.id, taskObj.rank, taskObj.text);
    });
    ranked_objs = _.sortBy(objs, function(o) {
      return o.data("rank");
    });
    return appendTasksToTaskList(ranked_objs);
  };

  deleteFromStorage = function(task) {
    var id;
    id = task.data("id");
    return localStorage.removeItem(id);
  };

  create = function(id, rank, text) {
    var task;
    task = $("<li></li>").clone();
    task.data("id", id).data("rank", rank).html(text).addClass("task").dblclick(function() {
      return dblClickHandler(task);
    });
    return task;
  };

  dblClickHandler = function(task) {
    var bottoms, id, rank, tasks;
    id = task.data("id");
    rank = task.data("rank");
    tasks = getTasksFromUI();
    bottoms = getBottomNeighbors(rank, tasks);
    modifyNeighborRanks(bottoms, -1);
    deleteFromStorage(task);
    return task.remove();
  };

  appendTasksToTaskList = function(tasks) {
    return _.each(tasks, function(t) {
      return appendToTaskList(t);
    });
  };

  appendToTaskList = function(task) {
    return task.appendTo("#tasks");
  };

  storeTasks = function(tasks) {
    return _.each(tasks, function(t) {
      return store(t);
    });
  };

  store = function(task) {
    var id, taskJSON;
    taskJSON = taskToObject(task);
    id = taskJSON.id;
    task = JSON.stringify(taskJSON);
    return localStorage.setItem(id, task);
  };

  getNewId = function() {
    return getLargestId() + 1;
  };

  getLargestId = function() {
    var ids, largest, tasks;
    if (taskListEmpty()) {
      return -1;
    }
    tasks = getTasksFromUI();
    ids = _.map(tasks, function(task) {
      return task.data("id");
    });
    largest = _.max(ids);
    return largest;
  };

  getNewRank = function() {
    var newRank, ranks, tasks;
    if (taskListEmpty()) {
      return 0;
    }
    tasks = getTasksFromUI();
    ranks = _.map(tasks, function(task) {
      return task.data("rank");
    });
    newRank = _.max(ranks) + 1;
    return newRank;
  };

  taskListEmpty = function() {
    var isEmpty, tasks;
    tasks = getTasksFromUI();
    isEmpty = tasks.length === 0;
    return isEmpty;
  };

  taskToObject = function(task) {
    var json;
    json = {
      "id": task.data("id"),
      "rank": task.data("rank"),
      "text": task.html()
    };
    return json;
  };

  getTasksFromUI = function() {
    var children;
    children = $("#tasks").children();
    if (children.length === 0) {
      return [];
    }
    children = _.map(children, function(c) {
      return $(c);
    });
    return children;
  };

  tasksExist = function() {
    var ids;
    ids = Object.keys(localStorage);
    if (!_.isEmpty(ids)) {
      return true;
    } else {
      return false;
    }
  };

  getTopNeighborRank = function(id) {
    var i, neighborRank, tasks, top_neighbor, _i, _ref;
    tasks = getTasksFromUI();
    neighborRank = 0;
    for (i = _i = 0, _ref = tasks.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      top_neighbor = tasks[i + 1].data("id") === id;
      if (top_neighbor) {
        neighborRank = tasks[i].data("rank");
      }
    }
    return neighborRank;
  };

  getTopNeighbors = function(rank, tasks) {
    var tops;
    tops = _.filter(tasks, function(t) {
      return t.data("rank") <= rank;
    });
    return tops;
  };

  getBottomNeighbors = function(rank, tasks) {
    var bottoms;
    bottoms = _.filter(tasks, function(t) {
      return t.data("rank") > rank;
    });
    return bottoms;
  };

  modifyNeighborRanks = function(tasks, offset) {
    _.each(tasks, function(t) {
      return t.data("rank", t.data("rank") + offset);
    });
    return storeTasks(tasks);
  };

  sortStopHandler = function(e, ui) {
    var draggedTask, newRank, taskId, taskRank, tasks, tops;
    draggedTask = $(ui.item);
    taskRank = draggedTask.data("rank");
    taskId = draggedTask.data("id");
    tasks = getTasksFromUI();
    newRank = getTopNeighborRank(taskId);
    draggedTask.data("rank", newRank);
    tasks = _.reject(tasks, function(t) {
      return t.data("id") === taskId;
    });
    tops = getTopNeighbors(newRank, tasks);
    modifyNeighborRanks(tops, -1);
    return store(draggedTask);
  };

  $(function() {
    $("#tasks").sortable().bind("sortstop", function(e, ui) {
      return sortStopHandler(e, ui);
    });
    $("#todotext").keydown(function(e) {
      var enterPressed, id, isBlank, rank, text;
      enterPressed = e.keyCode === 13;
      if (enterPressed) {
        text = $("#todotext")[0].value;
        isBlank = text === "";
        if (!isBlank) {
          $("#todotext")[0].value = "";
          id = getNewId();
          rank = getNewRank();
          return create(id, rank, text, true);
        }
      }
    });
    return loadFromStorage();
  });

}).call(this);
